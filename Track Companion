import PySimpleGUI as sg
from datetime import datetime
from time import sleep


def main():
    blank_button = sg.Button(button_color=("light gray", "light gray"), disabled=True, size=(20, 1))
    ###################################################################################################################
    message = sg.Text("Welcome, select a sport or untility")
    ####################################################################################################################
    swimming_button = sg.Button("Swimming", size=(20, 1), key="Swimming")
    shotput_button = sg.Button("Shotput", size=(20, 1), key="Shotput")
    running_button = sg.Button("Running", size=(20, 1), key="Running")
    javelin_button = sg.Button("Javelin", size=(20, 1), key="Javelin")
    high_button = sg.Button("High Jump", size=(20, 1), key="High Jump")
    long_button = sg.Button("Long Jump", size=(20, 1), key="Long Jump")
    sparing_button = sg.Button("Sparing", size=(20, 1), key="Sparing")
    lifting_button = sg.Button("Weight lifting", size=(20, 1), key="Weight lifting")
    chess_button = sg.Button("Chess", size=(20, 1), key="Chess")
    volleyball_button = sg.Button("Volley ball", size=(20, 1), key="Volley ball")
    basketball_button = sg.Button("Basket Ball", size=(20, 1), key="Basket Ball")
    archery_button = sg.Button("Archery", size=(20, 1), key="Archery")
    ####################################################################################################################
    rows = [
        [message],
        [swimming_button, shotput_button],
        [running_button, javelin_button],
        [high_button, long_button],
        [sparing_button, lifting_button],
        [volleyball_button, basketball_button],
        [archery_button],
        [sg.Text("Special Events")],
        # [carnival_button],
        [blank_button],
        [blank_button, sg.Exit(button_color=("black", "red"), size=(20, 1))]

    ]
    ####################################################################################################################

    button_description_dict = {"Swimming":(swimming_button, show_timer_window),
                               "Running": (running_button, show_timer_window),
                               "Javelin": (javelin_button, show_distance_window),
                               "Shotput": (shotput_button, show_distance_window),
                               "High Jump": (high_button,  show_distance_window),
                               "Long Jump": (long_button,  show_distance_window),
                               "Sparing": (sparing_button, show_points_window),
                               "Weight Ligting": (lifting_button,show_points_window),
                               "Volley Ball": (volleyball_button, show_points_window),
                               "Basket Ball": (basketball_button, show_points_window),
                               "Archery": (archery_button, show_points_window)
                               }

    #################################################################################################################
    window = sg.Window("MAIN WINDOW").Layout(rows)
    # window.Layout(rows).Read()

    while True:
        button, value = window.Read()
        if button in button_description_dict:
            info = button_description_dict[button]
            func = info[1]
            func(button, info[0])

        # ===================================================================================================
        if button == "Quit" or button == "Exit":
            break


        # sleep(0.001)

    window.Close()  # Don"t forget to close your window!


def show_timer_window(text, update_button):
    runningDisplay = sg.Text("0:00")
    runningButton = sg.Button("Start", size=(20, 1))

    running_layout = [
        [runningDisplay],
        [runningButton],
        [sg.Button("lap", size=(20, 1))],
        [sg.Button("Close", button_color=("black", "red"), size=(20, 1))]
    ]

    running_window = sg.Window("Running").Layout(running_layout)

    running = False
    started = datetime.now()

    while True:

        run_button, run_value = running_window.Read(timeout=100)

        if running:
            current = datetime.now()
            elapsed = current - started
            runningDisplay.Update(
                str(elapsed.seconds) +
                ":" +
                str(elapsed.microseconds)[:2]
            )
            if run_button == "lap":
                print("Elapsed Time: ", str(elapsed))

        if run_button == "Start":
            started = datetime.now()
            print("Started at ", str(started))
            runningButton.Update(text="Stop")
            running = True

        if run_button == "Stop":
            runningButton.Update(text="Start")
            print("Your time was " + str(elapsed))
            running = False

        if run_button == "Close" or run_button is None:
            print("Stopping the clock and closing the running window.")
            runningButton.Update(text="Start")
            running = False

            update_button.Update(text=text+"(" + str(elapsed) + ")")
            running_window.Close()
            break


def show_distance_window(text, update_button):
    dist_result_log = []
    display = sg.Text("Distance Window ")
    message = sg.Text("Enter Results")
    results_output = sg.Text('')  # where you're displaying the results

    layout = [
        [display],
        [message],
        [sg.Input("Name", key="name"), sg.Input("Results", key="result")],
        [sg.Button("Submit")],
        [sg.Text("Result Log")],
        [results_output]
    ]

    distance_window = sg.Window("Distance").Layout(layout)
    while True:
        button, value = distance_window.Read()
        if button is None:
            break
        if button == "Submit":
            dist_result_log.append(value['name'])
            print(dist_result_log)
            result = '\n'.join(dist_result_log)
            results_output.Update(result)



def show_points_window(update_button, text):
    display_player_1 = sg.Text("0", size=(20, 1))
    P1 = 0
    display_player_2 = sg.Text("0", size=(20, 1))
    P2 = 0
    record_results = []
    layout = [
        [sg.Text("")],
        [sg.Text("player 1", size=(20, 1)), sg.Text("player 2", size=(20, 1))],
        [display_player_1, display_player_2],
        [sg.ReadFormButton("Player 2:+1", key=("p1_+1"), size=(20, 1)),
         sg.ReadFormButton("Player 2:+1", key=("p2_+1"), size=(20, 1))],
        [sg.ReadFormButton("Player 1: +2", key=("p1_+2"), size=(20, 1)),
         sg.ReadFormButton("Player 2: +2", key=("p2_+2"), size=(20, 1))],
        [sg.ReadFormButton("Player 1: +3", key=("p1_+3"), size=(20, 1)),
         sg.ReadFormButton("Player 2: +3", key=("p2_+3"), size=(20, 1))]
    ]
    window = sg.Window("Points_test")
    window.Layout(layout)
    while True:
        button, value = window.Read()

        if button is None:
            break

        if button == "p1_+1":
            P1 = P1 + 1
            display_player_1.Update(P1)
            print("player 1: " + str(P1))

        if button == "p1_+2":
            P1 = P1 + 2
            display_player_1.Update(P1)
            print("player 1: " + str(P1))

        if button == "p1_+3":
            P1 = P1 + 3
            display_player_1.Update(P1)
            print("player 1: " + str(P1))

        if button == "p2_+1":
            P2 = P2 + 1
            display_player_2.Update(P2)
            print("player 2: " + str(P2))

        if button == "p2_+2":
            P2 = P2 + 2
            display_player_2.Update(P2)
            print("player 2: " + str(P2))

        if button == "p1_+3":
            P2 = P2 + 3
            display_player_2.Update(P2)
            print("player 1: " + str(P2))


main()
